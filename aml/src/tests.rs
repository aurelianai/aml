use crate::{sgemm, F32Tensor};
use float_cmp::approx_eq;

/// These tests are for correctness coming from numpy.
/// See `../benches` for performance tests.

#[test]
fn sgemm_correctness_1() {
    let a_data = vec![
        42.0, -22.0, -17.0, -75.0, -123.0, -55.0, 22.0, -93.0, -90.0, 39.0, 67.0, 63.0, 90.0,
        -58.0, 32.0, -28.0, -51.0, 114.0, -35.0, 16.0, -80.0, 65.0, 3.0, -97.0, -55.0, 10.0, 113.0,
        -82.0, -45.0, 61.0, -87.0, -26.0, -98.0, 29.0, -114.0, 81.0, -113.0, 13.0, -18.0, 49.0,
        -124.0, -72.0, -108.0, 58.0, 42.0, -37.0, 65.0, -59.0, -49.0, 111.0, -63.0, -43.0, 117.0,
        124.0, -39.0, 5.0, -120.0, -113.0, 54.0, 21.0, 115.0, -103.0, -75.0, -97.0, -86.0, -25.0,
        -1.0, -45.0, 20.0, 102.0, -75.0, 4.0, -56.0, -27.0, 82.0, -41.0, -54.0, 79.0, -105.0,
        -74.0, 47.0, -53.0, 47.0, 0.0, 28.0, 85.0, -18.0, 79.0, 101.0, 91.0, -122.0, -8.0, -91.0,
        13.0, 119.0, 81.0, 0.0, -102.0, 92.0, 47.0, -52.0, 59.0, 0.0, -44.0, 92.0, 118.0, 95.0,
        -58.0, -118.0, 114.0, 45.0, -45.0, 54.0, 1.0, -62.0, -112.0, -57.0, 121.0, 45.0, 59.0,
        -116.0, 92.0, -5.0, 64.0, -45.0, -23.0, -86.0, 50.0, 87.0, 49.0, -59.0, 88.0, 48.0, -11.0,
        -115.0, 14.0, 123.0, 43.0, 10.0, -71.0, 52.0, 65.0, 52.0, -90.0, 56.0, 65.0, -84.0, 102.0,
        13.0, 0.0, -118.0, -23.0, -49.0, 97.0, -102.0, 98.0, -119.0, -34.0, 13.0, -40.0, 107.0,
        -99.0, -2.0, 113.0, 53.0, 50.0, -91.0, 103.0, -91.0, -93.0, 46.0, -49.0, -2.0, 1.0, -119.0,
        101.0, 0.0, 6.0, -102.0, -46.0, 56.0, -113.0, 19.0, -103.0, -108.0, -100.0, 66.0, -42.0,
        31.0, -71.0, -27.0, -103.0, -44.0, 115.0, -80.0, -112.0, -79.0, -86.0, -92.0, -43.0, -30.0,
        73.0, -116.0, 10.0, 102.0, 91.0, 36.0, 66.0, 36.0, 33.0, -108.0, -66.0, -15.0, 66.0, -39.0,
        21.0, 78.0, -57.0, -112.0, -50.0, -39.0, -83.0, -81.0, -116.0, -105.0, -74.0, 35.0, 57.0,
        -42.0, 31.0, -24.0, 92.0, 101.0, 109.0, -63.0, -103.0, -24.0, 120.0, -120.0, 13.0, -62.0,
        -78.0, -66.0, -32.0, 1.0, -36.0, 79.0, -106.0, -75.0, -7.0, 100.0, -56.0, -29.0, 29.0,
        92.0, -98.0, -60.0, -75.0, 73.0, -26.0, 12.0, -78.0, 124.0, 104.0, 47.0, 89.0, -122.0,
        -74.0, -34.0, 102.0, 22.0, -33.0, -44.0, 63.0, 57.0, -106.0, 110.0, 87.0, 1.0, -55.0,
        115.0, 79.0, -45.0, -78.0, 83.0, -102.0, -79.0, 109.0, -122.0, -21.0, 123.0, 114.0, 47.0,
        -89.0, -26.0, 104.0, 26.0, 98.0, 27.0, -99.0, 7.0, 104.0, -71.0, -55.0, -10.0, 79.0,
        -123.0, -26.0, -29.0, 28.0, -92.0, -90.0, -24.0, -120.0, -20.0, -1.0, -87.0, -15.0, -57.0,
        16.0, -19.0, 63.0, 120.0, -76.0, -4.0, 30.0, -10.0, 72.0, 68.0, -93.0, -16.0, -110.0,
        -28.0, -42.0, -29.0, 110.0, -78.0, 59.0, 61.0, 28.0, -89.0, 73.0, -118.0, -81.0, 51.0,
        28.0, -82.0, -58.0, -60.0, 72.0, 111.0, 68.0, -36.0, -39.0, -119.0, 39.0, 120.0, -41.0,
        -23.0, -55.0, 91.0, 102.0, -61.0, -37.0, -3.0, 3.0, 11.0, -27.0, -94.0, -21.0, 31.0, -76.0,
        -22.0, -55.0, 85.0, 73.0, 119.0, 10.0, -91.0, 111.0, -58.0, 107.0, -103.0, -61.0, 70.0,
        -108.0, 108.0, -21.0, 105.0, -99.0, -45.0, -14.0, 50.0, -25.0, 74.0, -44.0, 96.0, -50.0,
        112.0, -96.0, 8.0, -70.0, -19.0, -6.0, -100.0, -107.0, 38.0, 53.0, 22.0, -5.0, -48.0, 77.0,
        -99.0, 104.0, 17.0, -87.0, -104.0, -111.0, 106.0, -13.0, 41.0, 16.0, -104.0, 39.0, 35.0,
        103.0, -24.0, -72.0, 77.0, 76.0, 74.0, -55.0, -98.0, 119.0, 102.0, 6.0, 19.0, 64.0, 3.0,
        -97.0, 82.0, -105.0, 9.0, 50.0, -102.0, 56.0, -88.0, -56.0, -27.0, 33.0, -85.0, 53.0,
        -27.0, 50.0, -59.0, -9.0, 105.0, -71.0, 59.0, -56.0, -14.0, 123.0, -75.0, -110.0, 17.0,
        42.0, 69.0, -6.0, 22.0, 61.0, -82.0, -27.0, 96.0, 108.0, -51.0, 68.0, 107.0, -76.0, 123.0,
        122.0, 96.0, -62.0, 43.0, 42.0, -46.0, -35.0, -34.0, -1.0, -77.0, 29.0, -52.0, 6.0, 105.0,
        -41.0, -96.0, -118.0, -107.0, 68.0, -1.0, 91.0, -73.0, 110.0, -64.0, 19.0, 78.0, -44.0,
        75.0, 48.0, -38.0, 9.0, 14.0, 72.0,
    ];
    let a = F32Tensor::new(&a_data, vec![16, 32]);

    let b_data = vec![
        -119.0, 80.0, -107.0, -95.0, 29.0, -3.0, -85.0, -80.0, 0.0, -8.0, -85.0, 88.0, 52.0, -24.0,
        72.0, -119.0, 27.0, 98.0, 95.0, 109.0, -66.0, 14.0, 22.0, 87.0, -8.0, -24.0, 82.0, -121.0,
        -77.0, -5.0, -99.0, -2.0, 83.0, 33.0, 121.0, -29.0, 2.0, -7.0, -23.0, 68.0, 43.0, 4.0, 4.0,
        -54.0, 88.0, -52.0, -29.0, 77.0, -51.0, 24.0, 78.0, 32.0, -80.0, 61.0, 41.0, 59.0, 75.0,
        33.0, -52.0, 36.0, -21.0, -32.0, 48.0, -45.0, -13.0, -77.0, -92.0, 18.0, -73.0, -118.0,
        78.0, -6.0, 92.0, 83.0, -22.0, 113.0, 10.0, 105.0, 22.0, 11.0, -86.0, -13.0, 21.0, -95.0,
        11.0, 53.0, 67.0, -110.0, 105.0, 0.0, 11.0, 108.0, 25.0, 42.0, 101.0, -69.0, 70.0, -23.0,
        -121.0, -117.0, -58.0, 121.0, -77.0, -103.0, -29.0, -13.0, 45.0, -42.0, 21.0, 31.0, -19.0,
        66.0, 0.0, -32.0, -34.0, 59.0, 31.0, 11.0, -46.0, -63.0, 45.0, -91.0, -81.0, -55.0, -61.0,
        28.0, 99.0, -70.0, -96.0, -122.0, -72.0, 65.0, -57.0, 38.0, -99.0, 97.0, 28.0, -101.0,
        73.0, -52.0, -17.0, 3.0, -39.0, 6.0, 47.0, -12.0, -64.0, 33.0, 1.0, 101.0, 3.0, -27.0,
        -123.0, 121.0, -74.0, -31.0, -59.0, 34.0, 59.0, 94.0, -10.0, -99.0, 9.0, -85.0, 103.0,
        -21.0, 89.0, -12.0, -117.0, 38.0, 73.0, 24.0, 122.0, 92.0, -57.0, -104.0, -98.0, 22.0,
        27.0, -23.0, 72.0, 62.0, 86.0, 34.0, 2.0, 124.0, 59.0, 112.0, 12.0, -26.0, 52.0, -105.0,
        58.0, -54.0, -41.0, 63.0, -24.0, -77.0, 105.0, -114.0, 102.0, -44.0, 13.0, 51.0, 98.0,
        105.0, 123.0, 82.0, -58.0, 66.0, -55.0, -102.0, -99.0, -118.0, -65.0, -101.0, -62.0, -85.0,
        -79.0, 34.0, 33.0, 48.0, 65.0, 25.0, -45.0, -55.0, -64.0, 91.0, -85.0, 0.0, -59.0, -59.0,
        75.0, 19.0, -79.0, 62.0, 19.0, -29.0, -42.0, -64.0, 12.0, 61.0, 48.0, 91.0, 82.0, -97.0,
        57.0, -69.0, 120.0, 118.0, -59.0, -35.0, 37.0, -39.0, 33.0, -71.0, -49.0, 18.0, -117.0,
        -47.0, 41.0, -91.0, 46.0, 69.0, -15.0, 96.0, 0.0, -32.0, 99.0, 12.0, 84.0, 114.0, -105.0,
        -105.0, -30.0, 33.0, -15.0, -37.0, 57.0, -60.0, 11.0, -122.0, 110.0, 5.0, -105.0, 93.0,
        30.0, 86.0, -20.0, 3.0, -123.0, 109.0, 21.0, 29.0, -84.0, -87.0, -38.0, 10.0, 49.0, -47.0,
        -75.0, 87.0, 53.0, -40.0, 112.0, -25.0, 93.0, -63.0, 4.0, 119.0, -42.0, 73.0, -7.0, -12.0,
        -14.0, -74.0, 83.0, -68.0, -24.0, 76.0, 118.0, -67.0, 27.0, 114.0, 49.0, 63.0, -95.0,
        105.0, 50.0, -15.0, -31.0, -47.0, 73.0, -93.0, -118.0, 5.0, -123.0, 38.0, 78.0, 17.0,
        -13.0, -9.0, 91.0, -13.0, -86.0, -40.0, 42.0, -85.0, -42.0, 92.0, 112.0, 35.0, 123.0,
        -33.0, -18.0, 7.0, 103.0, -14.0, 124.0, 98.0, 99.0, -118.0, -34.0, -101.0, -2.0, -18.0,
        74.0, 98.0, -120.0, 59.0, 65.0, 91.0, -46.0, 123.0, -82.0, 81.0, -15.0, 45.0, 114.0, 19.0,
        -119.0, -97.0, 69.0, -88.0, -105.0, -83.0, -89.0, 66.0, -92.0, -100.0, -15.0, 114.0, 94.0,
        -54.0, 18.0, 86.0, -78.0, -49.0, 108.0, -91.0, -65.0, -39.0, 120.0, 2.0, -9.0, -62.0, 62.0,
        -5.0, -27.0, 51.0, 73.0, -20.0, -15.0, -76.0, 12.0, -6.0, -89.0, 52.0, 81.0, 93.0, 51.0,
        -56.0, -15.0, 90.0, -82.0, 110.0, -114.0, -23.0, -89.0, -35.0, -94.0, -88.0, 18.0, -41.0,
        108.0, 113.0, 82.0, -87.0, 13.0, 85.0, -84.0, -38.0, -66.0, -18.0, -11.0, 15.0, -93.0,
        83.0, 49.0, -92.0, -12.0, -74.0, 106.0, -24.0, -105.0, -49.0, -30.0, -57.0, 26.0, 49.0,
        123.0, -16.0, -54.0, 0.0, -61.0, 38.0, -91.0, -38.0, 73.0, -62.0, 15.0, -37.0, -75.0, 36.0,
        100.0, 62.0, 119.0, 96.0, -58.0, -73.0, 37.0, -36.0, 5.0, 89.0, 56.0, -25.0, -35.0, 101.0,
        6.0, 6.0, 10.0, -4.0, 48.0, 83.0, -75.0, 67.0, -5.0, -124.0, -36.0, 74.0, -38.0, 77.0,
        -55.0, -66.0, 72.0, -104.0, 81.0, -66.0, -47.0, -11.0, -53.0, -31.0,
    ];
    let b = F32Tensor::new(&b_data, vec![32, 16]);

    let mut c_actual: Vec<f32> = vec![0.0; 16 * 16];

    sgemm(&a, false, &b, false, &mut c_actual);

    let c_expected: Vec<f32> = vec![
        -12700.0, 19450.0, 5339.0, -39609.0, 23365.0, 867.0, 49771.0, -46474.0, -49346.0, 18562.0,
        11985.0, 2985.0, 5780.0, 22674.0, -366.0, -1041.0, 8300.0, 19990.0, 59280.0, 22709.0,
        7226.0, 32569.0, 7844.0, -12136.0, -4533.0, -23843.0, -23147.0, -4270.0, -31080.0,
        -12247.0, -7236.0, 10566.0, -22666.0, -14434.0, 10793.0, -4304.0, -11731.0, -9479.0,
        17871.0, 19366.0, -9334.0, -15252.0, 50149.0, -1625.0, -6356.0, 21005.0, 31299.0, 775.0,
        -50132.0, 1380.0, 21328.0, -38767.0, -9573.0, 10380.0, 11793.0, -13346.0, -56110.0, -353.0,
        -3647.0, -19444.0, -10742.0, 1590.0, 16914.0, 18454.0, -33325.0, -16214.0, 13719.0,
        10515.0, -51796.0, -12867.0, 3994.0, 16030.0, -9995.0, -17566.0, -12246.0, 7052.0, 2881.0,
        10350.0, 3599.0, 33100.0, 30444.0, 26712.0, 17320.0, -46343.0, 50150.0, -38582.0, 26487.0,
        -20170.0, 40610.0, 16138.0, -83575.0, 34665.0, 45271.0, -6047.0, 7850.0, -26426.0, -6651.0,
        44404.0, -4044.0, 18989.0, -44715.0, -35438.0, 25459.0, -7218.0, 5429.0, -7380.0, -9252.0,
        -2981.0, -31172.0, -9204.0, 50854.0, 33223.0, 45123.0, 18244.0, 15496.0, -12791.0, 11443.0,
        -11264.0, -2570.0, 17500.0, -12948.0, -8094.0, -61798.0, -33333.0, 4063.0, 10794.0,
        -5792.0, 40907.0, 10344.0, -53342.0, -50871.0, 17924.0, -56888.0, 7851.0, -60213.0,
        -40336.0, 18504.0, -68977.0, -4831.0, -36454.0, -47797.0, -10088.0, 30261.0, 34222.0,
        22926.0, -6664.0, 9848.0, -9900.0, -48708.0, -13208.0, 13286.0, -833.0, -16410.0, -28464.0,
        -28802.0, -23298.0, -13454.0, 34670.0, 1015.0, 54839.0, -11170.0, -7984.0, 5703.0, 19641.0,
        -19959.0, -22064.0, -12058.0, -29232.0, 26742.0, -39534.0, 46378.0, -31567.0, -6125.0,
        35542.0, -10529.0, -6229.0, -21532.0, -20588.0, -48184.0, 36921.0, -35338.0, -18065.0,
        10444.0, 16564.0, 6447.0, -6271.0, 3812.0, 34518.0, -46468.0, 9018.0, 24369.0, -4826.0,
        2544.0, -13787.0, -36153.0, -5122.0, -6526.0, -39932.0, 8603.0, 22244.0, 5096.0, 14211.0,
        -11073.0, 45672.0, 42612.0, 16469.0, 438.0, 3185.0, -1262.0, -30949.0, -26779.0, 35030.0,
        -30065.0, -33556.0, 14356.0, -23289.0, 3725.0, -39256.0, -30438.0, 6623.0, -24811.0,
        52353.0, 32965.0, 33310.0, -44708.0, -61825.0, 2447.0, 15389.0, -24414.0, -21732.0,
        -31479.0, 11402.0, -16735.0, -73658.0, 44468.0, -3547.0, -13135.0, 24009.0, -8415.0,
        5117.0, -27759.0, 5414.0, 25987.0, 4955.0, -13846.0, 17984.0, 2109.0, -1856.0, -23112.0,
        -27348.0, 1603.0, 9183.0, -34376.0, 13744.0, 29567.0, 3751.0,
    ];

    for (actual, expected) in c_actual.iter().zip(c_expected.iter()) {
        approx_eq!(f32, *actual, *expected);
    }
}

/* Delete
#[test]
fn sgemm_trivial_case() {
    let a_data = vec![
        -113.0, -97.0, -70.0, 19.0, -73.0, -1.0, 115.0, 37.0, -26.0, 53.0,
    ];
    let a = F32Tensor::new(&a_data, vec![2, 5]);
    let b_data = vec![
        -82.0, 23.0, 82.0, -73.0, -68.0, 122.0, 12.0, -44.0, 30.0, 4.0, -35.0, -116.0, -32.0,
        -101.0, 121.0,
    ];
    let b = F32Tensor::new(&b_data, vec![5, 3]);

    let mut c = vec![0.0; 6];

    sgemm(&a, false, &b, false, &mut c);

    let c_expected = [17919.0, 13785.0, -34237.0, -9669.0, -13914.0, 24487.0];

    for i in 0..6 {
        assert!(approx_eq!(f32, c[i], c_expected[i]));
    }
}

#[test]
fn sgemm_more_complex_case() {
    let a_data = vec![
        26.0, -61.0, 120.0, 82.0, -26.0, -76.0, 82.0, 42.0, 114.0, -81.0, 113.0, 22.0, 17.0, -23.0,
        42.0, -75.0, -31.0, 97.0, 30.0, -30.0, -118.0, -81.0, -105.0, -43.0, -37.0, -113.0, -107.0,
        9.0, -30.0, 41.0, 0.0, -25.0, 60.0, 6.0, 21.0, 6.0, -20.0, 120.0, 88.0, 14.0, -122.0, 91.0,
        -44.0, -34.0, -101.0, -122.0, 85.0, 59.0, 30.0, -39.0,
    ];
    let a = F32Tensor::new(&a_data, vec![5, 10]);

    let b_data = vec![
        -73.0, 119.0, -9.0, -68.0, -48.0, -100.0, 47.0, -112.0, -73.0, 107.0, -29.0, -12.0, -85.0,
        59.0, 99.0, -2.0, -3.0, 86.0, 49.0, -114.0, -71.0, -66.0, 88.0, 59.0, 117.0, -29.0, -43.0,
        69.0, 41.0, 64.0, -94.0, -34.0, 80.0, 68.0, 26.0, 91.0, 18.0, 8.0, 30.0, 87.0,
    ];
    let b = F32Tensor::new(&b_data, vec![10, 4]);

    let mut c = vec![0.0; 20];

    sgemm(&a, false, &b, false, &mut c);

    let c_expected: Vec<f32> = vec![
        9752.0, 37066.0, -13365.0, 9497.0, -1182.0, 29178.0, -15200.0, -24836.0, 18144.0, -13471.0,
        -11509.0, 9141.0, 5693.0, 25040.0, -8476.0, 3794.0, 33667.0, -27927.0, -21991.0, 6212.0,
    ];

    for (actual, expected) in c.iter().zip(c_expected.iter()) {
        approx_eq!(f32, *actual, *expected);
    }
}


fn locate_test_file(file: &str) -> String {
    let mut test_file_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    test_file_path.push("resources");
    test_file_path.push(file);

    String::from(
        test_file_path
            .to_str()
            .expect("path could not be converted to string"),
    )
}

#[test]
pub fn sgemm_correctness() {
    let mut arr1_fp = File::open(locate_test_file("f32-arr1.bin")).expect("1 not found");
    let mut arr2_fp = File::open(locate_test_file("f32-arr2.bin")).expect("2 not found");
    let mut arr3_fp = File::open(locate_test_file("f32-arr3.bin")).expect("3 not found");

    let mut arr1 = vec![0.0; 4096 * 1024];
    arr1_fp
        .read_f32_into::<BigEndian>(&mut arr1)
        .expect("Error Reading F32s from `f32-arr1.bin`");

    let mut arr2 = vec![0.0; 4096 * 512];
    arr2_fp
        .read_f32_into::<BigEndian>(&mut arr2)
        .expect("Error Reading F32s from `f32-arr2.bin`");

    let mut arr3_expected = vec![0.0; 512 * 1024];
    arr3_fp
        .read_f32_into::<BigEndian>(&mut arr3_expected)
        .expect("Error Reading F32s from `f32-arr3.bin`");

    let a = F32Tensor::new(&mut arr1, vec![1024, 4096]);
    let b = F32Tensor::new(&mut arr2, vec![4096, 512]);
    let mut c = vec![0.0; 512 * 1024];

    sgemm(&a, false, &b, false, &mut c);

    for i in 0..(1024 * 512) {
        assert!(approx_eq!(f32, c[i], arr3_expected[i]));
    }
}
*/
